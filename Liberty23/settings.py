"""
Django settings for Liberty23 project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
from environs import Env

env = Env()
env.read_env()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', 'django-insecure-7jp!#3dgj5-in4i@g2iy5v30e_hxw(o!_8&wyqd4c!&4gi!=#1')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', True)

# ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', ['127.0.0.1', 'localhost'])

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', ['*'])
# CSRF_TRUSTED_ORIGINS = ['http://', 'https://']

ALLOWED_PORT = env('ALLOWED_PORT', '')

LOG_ENV = env('LOG_ENV', 'development' if DEBUG else 'production')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    'rest_framework',
    'rest_framework.authtoken',
    'django_extensions',
    'django_summernote',

    'catalog',
    'prices',
    'cart',
    'orders',
    'enterprise',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'Liberty23.middleware.dynamic_csrf.DynamicCsrfTrustedOriginsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Liberty23.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'enterprise.context_processors.contact',
                'enterprise.context_processors.department',
                'cart.context_processors.cart',
            ],
            'libraries': {
                'catalog_tags': 'catalog.templatetags.tags',
                'cart_tags': 'cart.templatetags.tags',
                'news_tags': 'enterprise.templatetags.tags',
                'order_tags': 'orders.templatetags.tags',
            },
        },
    },
]

WSGI_APPLICATION = 'Liberty23.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': env('DB_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': env('DB_NAME', BASE_DIR / 'db.sqlite3'),
        'USER': env('DB_USER', ''),
        'PASSWORD': env('DB_PASSWORD', ''),
        'HOST': env('DB_HOST', ''),
        'PORT': env('DB_PORT', ''),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = False

#The maximum number of parameters that may be received via GET or POST
DATA_UPLOAD_MAX_NUMBER_FIELDS = None

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Static & media
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static/'),]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')


# Authentication
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}


CART_SESSION_ID = 'cart'
DEPARTMENT_SESSION_ID = 'department'

# Summernote settings
X_FRAME_OPTIONS = 'SAMEORIGIN'
SUMMERNOTE_THEME = 'bs4'


#Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'tg_filter': {
            '()': 'utils.log_handlers.TelegramFilter',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'tg': {
            'level': 'INFO',
            'class': 'utils.log_handlers.TgLogHandler',
            'token': env('TG_TOKEN'),
            'chat_id': env('TG_CHART_ID'),
            'formatter': 'tg',
            'filters': ['tg_filter'],
        },
    },
    'formatters': {
        'tg': {
            '()': 'utils.log_handlers.TelegramLogFormatter',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'tg'],
            'level': 'DEBUG',
        }
    },
}
